
;           10.9 """模块化程序设计"""

;call 与ret指令共同支持了汇编语言编程中的模块化设计。在实际编程中，程序的模块化
;是必不可少的。因为现实的问题比较复杂，对现实问题进行分析时，把它转化为相互联系、
;不同层次的子问题，是必须的解决办法。而call与ret指令对这种分析方法提供了程序实现
;上的支持。利用call和ret指令，我们可以用简捷的方法，实现多个相互联系、功能独立的
;子程序来解决一个复杂的问题。

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

;            10.10 """参数和结果传递的问题"""

;子程序一般都要根据提供的参数处理一定的事务，处理后，将结果（返回值）提供给调用者。
;其实，我们讨论参数和返回值传递的问题，实际上就是在探讨，应该如何存储子程序需要的
;参数和产生的返回值。

;比如：设计一个子程序，可以根据提供的N，来计算N的3次方。
;这里面就有两个问题：
;1.将参数N存储在什么地方？
;2.计算得到的数值，存储在什么地方？

;子程序如下：
;说明：计算N的3次方
;参数：（bx）=N
;结果：（dx:ax）=N^3

;cube:	mov ax,bx
;		mul bx
;		mul bx
;		ret

;编程，计算data段中第一组数据的3次方，结果保存在后面一组dword单元中
assume cs:code

data segment
	
	dw 1,2,3,4,5,6,7,8
	dd 0,0,0,0,0,0,0,0
	
data ends

code segment

start:	mov ax,data
		mov ds,ax
		mov si,0				;ds:si指向第一组word单元
		mov di,16				;ds:di指向第二组dword单元
		
		mov cx,8
		
	s:	mov bx,[si]				;把第一组的数据依次放入bx寄存器中
		call cube
		mov [di],ax				;把返回结果的低位数据放到第二组数据中
		mov [di].2,dx			;把返回结果的高位数据放到第二组数据中
		add si,2				;ds:si指向下一个word单元
		add di,4				;ds:di指向下一个dword单元
		loop s 
		
		mov ax,4c00h
		int 21h
		
cube:	mov ax,bx				;子程序计算第一组数据的3次方
		mul bx
		mul bx
		ret
		
code ends

end start
