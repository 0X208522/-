
;		15_1	接口芯片和端口

;PC系统的接口卡和主板上，装有各种接口芯片。这些外设接口芯片的内部有若干寄存器，CPU将
;这些寄存器当作端口来访问。

;外设的输入不直接进入内存和CPU，而是送入相关接口芯片的端口中；CPU向外设的输出也不是
;直接送入外设，而是先送入端口中，再由相关的芯片送到外设。CPU还可以向外设输出控制命令
;而这些控制命令也是先送到相关芯片的端口中，然后再由相关的芯片根据命令对外设实施控制。
;可见，CPU通过端口和外部设备进行联系。

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;		15_2	外中断信息

;现在，我们知道了外设的输入被存放在端口中，可是外设的输入随时都有可能到达，CPU如何及时
;地知道，并进行处理呢？更一般地讲，就是外设随时都可能发生需要CPU及时处理的事件，CPU如
;何及时得知并进行处理？

;CPU提供中断机制来满足这种需要。前面讲过，当CPU的内部有需要处理的事情发生时，将产生中断
;信息，引发中断过程。这种中断信息来自CPU的内部。
;还有一种中断信息，来自CPU外部，当CPU外部有需要处理的事情发生的时候，比如说，外设的输入
;到达，相关芯片将向CPU发出相应的中断信息。CPU在执行完当前指令后，可以检测到发送过来的中
;断信息，引发中断过程，处理外设的输入。

;在PC系统中，外中断源一共有以下两种:

;1.可屏蔽中断

	;可屏蔽中断是CPU可以不响应的中断。CPU是否响应可屏蔽中断，要看标志寄存器的IF位的设置。
	;当CPU检测到可屏蔽中断信息时，如果IF=1，则CPU在执行完当前指令后响应中断，引发中断
	;过程。如果IF=0，则不响应可屏蔽中断
	
	;我们回忆一下内中断所引发的中断过程：
	;(1)取中断类型码n
	;(2)标志寄存器入栈，IF=0,TF=0
	;(3)CS、IP入栈
	;(4)(IP)=(N*4),(CS)=(n*4+2)
	;由此转去执行中断处理程序。
	
;可屏蔽中断所引发的中断过程，除在第1步的实现上有所不同外，基本上和内中断的中断过程相同。
;因为可屏蔽中断信息来于CPU外部，中断类型码是通过数据总线送入CPU的；而内中断的中断类型
;码是在CPU内部产生的

;现在，我们可以解释中断过程中将IF置为0的原因了。将IF置0的原因就是，在进行中断处理程序
;后，禁止其他的可屏蔽中断。

;当然，如果在中断处理程序中需要处理可屏蔽中断，可以用指令将IF置1。8086CPU提供的设置IF
;的指令如下：
;sti,设置IF=1
;cli,设置IF=0

;2.不可屏蔽中断

	;不可屏蔽中断是CPU必须响应的外中断。当CPU检测到不可屏蔽中断信息时，则在执行完当前
	;指令后，立即响应，引发中断过程。这种中断信息来自CPU的内部。
	
	;对于8086CPU，不可屏蔽中断的中断类型码固定为2，所以中断过程中，不需要取中断类型码
	;则不可屏蔽中断的中断过程为：
	;(1)标志寄存器入栈，IF=0，TF=0
	;(2)CS、IP入栈
	;(3)(IP)=(8),(CS)=(0AH)
	
;几乎所有由外设引发的外中断，都是可屏蔽中断。当外设有需要处理的事件(比如说键盘输入)发
;生时，相关芯片向CPU发出可屏蔽中断信息。不可屏蔽中断是在系统中有必须处理的紧急情况发生
;时用来通知CPU的中断信息。课程中主要讨论可屏蔽中断。
	